; ModuleID = '2dloop2darrary.c'
source_filename = "2dloop2darrary.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define dso_local void @f([100 x i32]* nocapture %A) local_unnamed_addr #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup3, %entry
  %indvars.iv114 = phi i64 [ 1, %entry ], [ %indvars.iv.next115, %for.cond.cleanup3 ]
  %0 = add nsw i64 %indvars.iv114, -1
  br label %for.body4

for.cond.cleanup3:                                ; preds = %for.body4
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 1
  %exitcond117 = icmp eq i64 %indvars.iv.next115, 100
  br i1 %exitcond117, label %for.cond33.preheader, label %for.cond1.preheader

for.body4:                                        ; preds = %for.body4, %for.cond1.preheader
  %indvars.iv110 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next111, %for.body4 ]
  %1 = add nsw i64 %indvars.iv110, -1
  %arrayidx7 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %1, i64 %0
  %2 = load i32, i32* %arrayidx7, align 4, !tbaa !2
  %arrayidx12 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %indvars.iv110, i64 %0
  %3 = load i32, i32* %arrayidx12, align 4, !tbaa !2
  %arrayidx17 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %1, i64 %indvars.iv114
  %4 = load i32, i32* %arrayidx17, align 4, !tbaa !2
  %add = add i32 %2, 1
  %add18 = add i32 %add, %3
  %add19 = add i32 %add18, %4
  %arrayidx23 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %indvars.iv110, i64 %indvars.iv114
  store i32 %add19, i32* %arrayidx23, align 4, !tbaa !2
  %indvars.iv.next111 = add nuw nsw i64 %indvars.iv110, 1
  %exitcond113 = icmp eq i64 %indvars.iv.next111, 50
  br i1 %exitcond113, label %for.cond.cleanup3, label %for.body4

for.cond33.preheader:                             ; preds = %for.cond.cleanup3, %for.cond.cleanup35
  %indvars.iv106 = phi i64 [ %indvars.iv.next107, %for.cond.cleanup35 ], [ 1, %for.cond.cleanup3 ]
  %5 = add nsw i64 %indvars.iv106, -1
  br label %for.body36

for.cond.cleanup30:                               ; preds = %for.cond.cleanup35
  ret void

for.cond.cleanup35:                               ; preds = %for.body36
  %indvars.iv.next107 = add nuw nsw i64 %indvars.iv106, 1
  %exitcond109 = icmp eq i64 %indvars.iv.next107, 100
  br i1 %exitcond109, label %for.cond.cleanup30, label %for.cond33.preheader

for.body36:                                       ; preds = %for.body36, %for.cond33.preheader
  %indvars.iv = phi i64 [ 0, %for.cond33.preheader ], [ %indvars.iv.next, %for.body36 ]
  %6 = add nsw i64 %indvars.iv, -1
  %arrayidx42 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %6, i64 %5
  %7 = load i32, i32* %arrayidx42, align 4, !tbaa !2
  %arrayidx47 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %indvars.iv, i64 %5
  %8 = load i32, i32* %arrayidx47, align 4, !tbaa !2
  %arrayidx53 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %6, i64 %indvars.iv106
  %9 = load i32, i32* %arrayidx53, align 4, !tbaa !2
  %add48 = add i32 %7, 1
  %add54 = add i32 %add48, %8
  %add55 = add i32 %add54, %9
  %arrayidx59 = getelementptr inbounds [100 x i32], [100 x i32]* %A, i64 %indvars.iv, i64 %indvars.iv106
  store i32 %add55, i32* %arrayidx59, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 50
  br i1 %exitcond, label %for.cond.cleanup35, label %for.body36
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 9.0.0 "}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
